{
  "_args": [
    [
      {
        "raw": "zip-stream@http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
        "scope": null,
        "escapedName": "zip-stream",
        "name": "zip-stream",
        "rawSpec": "http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
        "spec": "http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
        "type": "remote"
      },
      "/Users/jenkins/workspace/mfp-cordova-plugins-build-and-deploy/target/cordova-runtime/plugins/cordova-plugin-mfp"
    ]
  ],
  "_from": "zip-stream@>=0.8.0 <0.9.0",
  "_id": "zip-stream@0.8.0",
  "_inCache": true,
  "_location": "/cordova-plugin-mfp/archiver/zip-stream",
  "_phantomChildren": {
    "buffer-crc32": "0.2.5",
    "readable-stream": "2.0.5"
  },
  "_requested": {
    "raw": "zip-stream@http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
    "scope": null,
    "escapedName": "zip-stream",
    "name": "zip-stream",
    "rawSpec": "http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
    "spec": "http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/cordova-plugin-mfp/archiver"
  ],
  "_resolved": "http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
  "_shasum": "236b2fe25823cb4f48e8336f5bfa743aa5ae9dbd",
  "_shrinkwrap": null,
  "_spec": "zip-stream@http://visustar.francelab.fr.ibm.com:8081/nexus/content/groups/mobile-npm-all/zip-stream/-/zip-stream-0.8.0.tgz",
  "_where": "/Users/jenkins/workspace/mfp-cordova-plugins-build-and-deploy/target/cordova-runtime/plugins/cordova-plugin-mfp",
  "author": {
    "name": "Chris Talkington",
    "url": "http://christalkington.com/"
  },
  "bugs": {
    "url": "https://github.com/archiverjs/node-zip-stream/issues"
  },
  "dependencies": {
    "archiver-utils": "~0.3.0",
    "compress-commons": "~0.4.0",
    "lodash": "~3.10.1",
    "readable-stream": "~2.0.0"
  },
  "description": "a streaming zip archive generator.",
  "devDependencies": {
    "chai": "~3.4.0",
    "mkdirp": "~0.5.0",
    "mocha": "~2.3.3",
    "rimraf": "~2.4.3"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/archiverjs/node-zip-stream",
  "keywords": [
    "archive",
    "stream",
    "zip-stream",
    "zip"
  ],
  "license": "MIT",
  "main": "lib/zip-stream.js",
  "name": "zip-stream",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# zip-stream v0.8.0 [![Build Status](https://travis-ci.org/archiverjs/node-zip-stream.svg?branch=master)](https://travis-ci.org/archiverjs/node-zip-stream) [![Build status](https://ci.appveyor.com/api/projects/status/2sraarbaadwbtti2/branch/master?svg=true)](https://ci.appveyor.com/project/ctalkington/node-zip-stream/branch/master)\r\n\r\nzip-stream is a streaming zip archive generator based on the `ZipArchiveOutputStream` prototype found in the [compress-commons](https://www.npmjs.org/package/compress-commons) project.\r\n\r\nIt was originally created to be a successor to [zipstream](https://npmjs.org/package/zipstream).\r\n\r\n[![NPM](https://nodei.co/npm/zip-stream.png)](https://nodei.co/npm/zip-stream/)\r\n\r\n### Install\r\n\r\n```bash\r\nnpm install zip-stream --save\r\n```\r\n\r\nYou can also use `npm install https://github.com/archiverjs/node-zip-stream/archive/master.tar.gz` to test upcoming versions.\r\n\r\n### Usage\r\n\r\nThis module is meant to be wrapped internally by other modules and therefore lacks any queue management. This means you have to wait until the previous entry has been fully consumed to add another. Nested callbacks should be used to add multiple entries. There are modules like [async](https://npmjs.org/package/async) that ease the so called \"callback hell\".\r\n\r\nIf you want a module that handles entry queueing and much more, you should check out [archiver](https://npmjs.org/package/archiver) which uses this module internally.\r\n\r\n```js\r\nvar packer = require('zip-stream');\r\nvar archive = new packer(); // OR new packer(options)\r\n\r\narchive.on('error', function(err) {\r\n  throw err;\r\n});\r\n\r\n// pipe archive where you want it (ie fs, http, etc)\r\n// listen to the destination's end, close, or finish event\r\n\r\narchive.entry('string contents', { name: 'string.txt' }, function(err, entry) {\r\n  if (err) throw err;\r\n  archive.entry(null, { name: 'directory/' }, function(err, entry) {\r\n    if (err) throw err;\r\n    archive.finish();\r\n  });\r\n});\r\n```\r\n\r\n### Instance API\r\n\r\n#### getBytesWritten()\r\n\r\nReturns the current number of bytes written to this stream.\r\n\r\n#### entry(input, data, callback(err, data))\r\n\r\nAppends an input source (text string, buffer, or stream) to the instance. When the instance has received, processed, and emitted the input, the callback is fired.\r\n\r\n#### finish()\r\n\r\nFinalizes the instance. You should listen to the destination stream's `end`/`close`/`finish` event to know when all output has been safely consumed. (`finalize` is aliased for back-compat)\r\n\r\n### Instance Options\r\n\r\n#### comment `string`\r\n\r\nSets the zip comment.\r\n\r\n#### store `boolean`\r\n\r\nIf true, all entry contents will be archived without compression by default.\r\n\r\n#### zlib `object`\r\n\r\nPassed to node's [zlib](http://nodejs.org/api/zlib.html#zlib_options) module to control compression. Options may vary by node version.\r\n\r\n### Entry Data\r\n\r\n#### name `string` `required`\r\n\r\nSets the entry name including internal path.\r\n\r\n#### type `string`\r\n\r\nSets the entry type. Defaults to `file` or `directory` if name ends with trailing slash.\r\n\r\n#### date `string|Date`\r\n\r\nSets the entry date. This can be any valid date string or instance. Defaults to current time in locale.\r\n\r\n#### store `boolean`\r\n\r\nIf true, entry contents will be archived without compression.\r\n\r\n#### comment `string`\r\n\r\nSets the entry comment.\r\n\r\n#### mode `number`\r\n\r\nSets the entry permissions.\r\n\r\n## Things of Interest\r\n\r\n- [Releases](https://github.com/archiverjs/node-zip-stream/releases)\r\n- [Contributing](https://github.com/archiverjs/node-zip-stream/blob/master/CONTRIBUTING.md)\r\n- [MIT License](https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE-MIT)\r\n\r\n## Credits\r\n\r\nConcept inspired by Antoine van Wel's [zipstream](https://npmjs.org/package/zipstream) module, which is no longer being updated.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/archiverjs/node-zip-stream.git"
  },
  "scripts": {
    "test": "mocha --reporter dot"
  },
  "version": "0.8.0"
}
